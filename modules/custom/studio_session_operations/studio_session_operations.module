<?php

/**
 * @file
 * Contains studio_session_operations.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\studiobridge_commons\Queues;

/**
 * Implements hook_help().
 */
function studio_session_operations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the studio_session_operations module.
    case 'help.page.studio_session_operations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module contains operations required for closing session.') . '</p>';
      return $output;

    default:
  }
}



/**
 * Implements hook_mail().
 */
function studio_session_operations_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'shootlist':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      // $message['subject'] = t('Article created: @title', array('@title' => $params['node_title']), $options);
      $message['subject'] = t('@title', array('@title' => $params['node_title']), $options);
      $message['body'][] = $params['message'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

      break;
  }
}

/**
 * Implements hook_cron().
 *
 */
function studio_session_operations_cron(){

  // Get products of today sessions
  // Load services as it is object context.
  $StudioSessions = \Drupal::service('studio.sessions');
  $today_products = $StudioSessions->GetTodaySessionUnMappedProducts();

  // Build queues
  $sid = rand(100000,999999);
  studio_session_operations_build_queues($today_products, $sid);

  // Run queues
  Queues::RunMappingQueues($sid);
}

/*
 * Helper functions to get products of sessions.
 */
function studio_session_operations_build_queues($unmapped_products, $sid){
  $identifier = false;
  if($unmapped_products){
    foreach($unmapped_products as $product){

      $title = $product->title->getValue();
      if ($title) {
        $identifier = $title[0]['value'];
      }

      if($identifier){
        $StudioProducts = \Drupal::service('studio.products');
        //$server_product = Products::getProductExternal($identifier);
        $server_product = $StudioProducts->getProductExternal($identifier);
        $server_product = json_decode($server_product);
        if (!isset($server_product->msg)){

          if (is_object($server_product)) {
            studio_session_operations_node_covert($product,$server_product);
            Queues::CreateQueueProductMapping($sid, $server_product, $product->id());
          }

        }
      }
    }
  }
}

/*
 * Helper function to convert unmapped to mapped products.
 */
function studio_session_operations_node_covert($unmappedProduct,$server_product){
  if (is_object($server_product)) {
    $unmappedProduct->type->setValue('products');
    $unmappedProduct->save();
  }

  function studio_session_operations_theme($existing, $type, $theme, $path) {
    return array(
        'csv_import' => array(
          'variables' => array('products' => NULL),
      ),
    );
}

}
