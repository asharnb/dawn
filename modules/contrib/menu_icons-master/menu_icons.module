<?php
/**
 * @file
 * Module to associate icons with menu items
 */

/**
 * @file
 * Allows users to create and organize related content in an outline.
 */

use Drupal\Component\Utility\String;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_theme_registry_alter()
 *   Override the node hierarchy child links function.
 *
 * @param $theme_registry
 */
function menu_icons_theme_registry_alter(&$theme_registry) {
  // Override the link theming functions to hide titles if so configured.
  if (\Drupal::config('menu_icons.settings')->get('title_display')) {
    if (!empty($theme_registry['menu_link'])) {
      $theme_registry['menu_link']['function'] = 'menu_icon_menu_link';
    }
    if (!empty($theme_registry['link'])) {
      $theme_registry['link']['function'] = 'menu_icon_link';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter()
 */
function menu_icons_form_menu_link_content_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $menu_entity = $form_state->getFormObject()->getEntity();
  if ($menu_entity instanceof \Drupal\Core\Entity\EntityInterface) {
    $mlid = $menu_entity->id();
  }
  if ($mlid) {
  $options = db_query('SELECT link__options FROM {menu_link_content_data} WHERE id = :id',
    array(':id' =>  $mlid))->fetchAssoc();
  }
  $options = unserialize($options['link__options']);
  if (!isset($options) || !isset($options['menu_icon'])) {
    $options = array('menu_icon' => array('enable' => NULL, 'image_style' => NULL));
  }

  $form['icon'] = array(
    '#type' => 'fieldset',
    '#weight' => 5,
    '#title' => t('Menu icon settings'),
    '#description' => t('If checked, the following icon will be used as background image for this menu item.'),
    '#attributes' => array('classes' => array('theme-settings-bottom')),
  );
  $form['icon']['use_icon_logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use an icon'),
    '#default_value' => $options['menu_icon']['enable'],
    '#tree' => FALSE,
    '#description' => t('Check this if you want this icon to be used.'),
  );

  $form['icon']['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE),
    '#empty_option' => '<' . t('Menu Icons default') . '>',
    '#default_value' => $options['menu_icon']['image_style'],
    '#description' => t('The preview image will be shown while editing the content.'),
    '#required' => FALSE,
  );

  $form['icon']['icon_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to the icon'),
    '#default_value' => (isset($options['menu_icon']['path']) ? $options['menu_icon']['path'] : \Drupal::config('menu_icons.settings')->get('menu_icons_default_icon')),
    '#description' => t('The path to the image you would like to use as a background image for this menu item.'),
  );
  $form['icon']['icon_path']['#states'] = array(
      'visible' => array (
      ':input[name="use_icon_logo"]' => array('checked' => TRUE),
    ),
  );

  $form['icon']['icon_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload a new icon image'),
    '#maxlength' => 40,
    '#description' => t("If you don't have direct file access to the server, use this field to upload your icon."),
  );
  $form['icon']['icon_upload']['#states'] = array(
      'visible' => array (
      ':input[name="use_icon_logo"]' => array('checked' => TRUE),
    ),
  );

  $form['submit']['#weight'] = 9;
  $form['delete']['#weight'] = 10;

  $form['#attributes']['enctype'] = 'multipart/form-data';
  $form['actions']['submit']['#submit'][] = 'menu_icons_form_submit';

  // Add a custom submit callback for image style forms.
  if (in_array($form_id, array('image_style_form', 'image_effect_form', 'image_style_revert_form', 'image_style_delete_form'))) {
    $form['actions']['submit']['#submit'][] = 'menu_icons_css_generate';
  }
}

/**
 * Process the submitted form
 */
function menu_icons_form_submit(array $form, FormStateInterface $form_state) {
  $menu_entity = $form_state->getFormObject()->getEntity();
  if ($menu_entity instanceof \Drupal\Core\Entity\EntityInterface) {
    $mlid = $menu_entity->id();
  }
  // Check the destination folder, attempt to create it if it does't exist
  $directory_path = menu_icons_directory_path();
  file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

  // Store the current icon path
  $path = $form_state->getValue('icon_path');

  // Define the validation settings
  $validators = array(
    'file_validate_is_image' => array(),
  );
  // Check for a new uploaded icon, and use that instead.
  if ($file = file_save_upload('icon_upload',  $validators, $directory_path, 0, $form_state->getValue('icon_upload'))) {

    $parts = pathinfo($file->getFilename());
    $filename = $directory_path . '/menu_icon_' . $mlid . '.' . $parts['extension'];
    file_unmanaged_copy($file->getFileUri(), $filename, FILE_EXISTS_REPLACE);

    // Flush image style generated images
    image_path_flush($filename);
    $path = $filename;
  }

  $options = unserialize(db_query('SELECT link__options FROM {menu_link_content_data} WHERE id = :id', array(':id' => $mlid)));
  $options['menu_icon'] = array(
    'enable' => $form_state->getValue('use_icon_logo'),
    'path' => $path,
    'image_style' => $form_state->getValue('image_style'),
  );
  // Use default image style if not explicitly set.
  if (empty($options['menu_icon']['image_style'])) {
    $options['menu_icon']['image_style'] = \Drupal::config('menu_icons.settings')->get('style');
  }

  if (!isset($options['attributes'])) {
    $options['attributes'] = array();
  }
  if (!isset($options['attributes']['class'])) {
    $options['attributes']['class'] = array();
  }

  $classes = array();
  $classes[] = "menu_icon";
  $classes[] = "menu-" . $mlid;
  if ($options['menu_icon']['enable'] && !empty($options['menu_icon']['path']) && file_exists($options['menu_icon']['path'])) {
    foreach ($classes as $class) {
      if (!in_array($class, $options['attributes']['class'])) {
        $options['attributes']['class'][] = $class;
      }
    }
  }

  if (empty($options['attributes']['class'])) {
    unset($options['attributes']['class']);
  }
  db_update('menu_link_content_data')
  ->fields(array(
    'link__options' => serialize($options),
  ))
  ->condition('id', $mlid)
  ->execute();
  // Regenerate the css file
  menu_icons_css_generate();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Adds menu item fields to the node form.
 *
 * @see menu_icons_node_submit()
 */
function menu_icons_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['advanced'])) {
    if ($form['menu']['link']['entity_id']['#value']) {
      $options = db_query('SELECT link__options FROM {menu_link_content_data} WHERE id = :id',
        array(':id' =>  $form['menu']['link']['entity_id']['#value']))->fetchAssoc();
    }
    $options = unserialize($options['link__options']);
    if (!isset($options) || !isset($options['menu_icon'])) {
      $options = array('menu_icon' => array('enable' => NULL, 'image_style' => NULL));
    }

    $form['menu']['icon'] = array(
      '#type' => 'fieldset',
      '#weight' => 5,
      '#title' => t('Menu icon settings'),
      '#description' => t('If checked, the following icon will be used as background image for this menu item.'),
      '#collapsible' => TRUE,
      '#collapsed' => !$options['menu_icon']['enable'],
      '#states' => array(
        'invisible' => array(
          ':input[name="menu[enabled]"]' => array('checked' => FALSE),
          ),
        ),
    );
    $form['menu']['icon']['use_icon_logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use an icon'),
      '#default_value' => $options['menu_icon']['enable'],
      '#tree' => FALSE,
      '#description' => t('Check this if you want this icon to be used.'),
    );
    $form['menu']['icon']['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#options' => image_style_options(FALSE),
      '#empty_option' => '<' . t('Menu Icons default') . '>',
      '#default_value' => $options['menu_icon']['image_style'],
      '#description' => t('The preview image will be shown while editing the content.'),
      '#required' => FALSE,
    );
    $form['menu']['icon']['icon_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to the icon'),
      '#default_value' => (isset($options['menu_icon']['path']) ? $options['menu_icon']['path'] : \Drupal::config('menu_icons.settings')->get('menu_icons_default_icon')),
      '#description' => t('The path to the image you would like to use as a background image for this menu item.'),
    );
    $form['menu']['icon']['icon_path']['#states'] = array(
        'visible' => array (
        ':input[name="use_icon_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['menu']['icon']['icon_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload a new icon image'),
      '#maxlength' => 40,
      '#description' => t("If you don't have direct file access to the server, use this field to upload your icon."),
      '#states' => array(
        'visible' => array (
          ':input[name="use_icon_logo"]' => array('checked' => TRUE),
          ),
        ),
    );
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'menu_icons_form_node_form_submit';
      }
    }
  }
}


/**
 * Custom submit handler for the node form to save menu icons settings.
 *
 * @see menu_icons_form_node_form_alter()
 */
function menu_icons_form_node_form_submit($form, FormStateInterface $form_state) {
  // Check the destination folder, attempt to create it if it does't exist
  $directory_path = menu_icons_directory_path();
  file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

  $icons_values = $form_state->getValue('menu');

  $path = $icons_values['icon']['icon_path'];

  // Define the validation settings
  $validators = array(
    'file_validate_is_image' => array(),
  );
  // Check for a new uploaded icon, and use that instead.
  if ($file = file_save_upload('icon_upload',  $validators, $directory_path, 0, $icons_values['icon']['icon_upload'])) {

    $parts = pathinfo($file->getFilename());
    $filename = $directory_path . '/menu_icon_' . $form['menu']['link']['entity_id']['#value'] . '.' . $parts['extension'];
    file_unmanaged_copy($file->getFileUri(), $filename, FILE_EXISTS_REPLACE);

    // Flush image style generated images
    image_path_flush($filename);
    $path = $filename;
  }

  $options = db_query('SELECT link__options FROM {menu_link_content_data} WHERE id = :id',
    array(':id' =>  $form['menu']['link']['entity_id']['#value']))->fetchAssoc();

  $options = unserialize($options['link__options']);
  if (!isset($options) || !isset($options['menu_icon'])) {
    $options = array('menu_icon' => array('enable' => NULL, 'image_style' => NULL));
  }

  $options['menu_icon'] = array(
    'path' => $path,
    'image_style' => $icons_values['icon']['image_style'],
  );
  // Use default image style if not explicitly set.
  if (empty($options['menu_icon']['image_style'])) {
    $options['menu_icon']['image_style'] = \Drupal::config('menu_icons.settings')->get('style');
  }

  if (!isset($options['attributes'])) {
    $options['attributes'] = array();
  }
  if (!isset($options['attributes']['class'])) {
    $options['attributes']['class'] = array();
  }
  $classes = array();
  $classes[] = "menu_icon";
  $classes[] = "menu-" . $form['menu']['link']['entity_id']['#value'];
  if ($options['menu_icon']['enable'] && !empty($options['menu_icon']['path']) && file_exists($options['menu_icon']['path'])) {
    foreach ($classes as $class) {
      if (!in_array($class, $options['attributes']['class'])) {
        $options['attributes']['class'][] = $class;
      }
    }
  }

  if (empty($options['attributes']['class'])) {
    unset($options['attributes']['class']);
  }

  db_update('menu_link_content_data')
    ->fields(array(
      'link__options' => serialize($options),
    ))
    ->condition('id', $form['menu']['link']['entity_id']['#value'])
    ->execute();
  // Regenerate the css file
  menu_icons_css_generate();
}

/**
 * Implements hook_node_insert().
 */
function menu_icons_node_insert($node) {
  menu_icons_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function menu_icons_node_update($node) {
  menu_icons_node_save($node);
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function menu_icons_node_save($node) {
  if (isset($node->menu['icon']) && $node->menu['icon']['enable']) {
    // Check the destination folder, attempt to create it if it does't exist
    $directory_path = menu_icons_directory_path();
    file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

    // Take the current icon path
    $path = $node->menu['icon']['path'];
    $file = FALSE;
    // Define the validation settings
    $validators = array(
      'file_validate_is_image' => array(),
    );
    if (!empty($path)) {
      $file = file_save_upload('icon_upload',  $validators, $directory_path, 0, FILE_EXISTS_RENAME);
    }
    if ($file) {
      // Move temporary file to it's destination.
      $parts = pathinfo($file->source);
      $new_path = $directory_path . '/menu_icon_' . $node->menu['mlid'] . '.' . $parts['extension'];
      $node->menu['icon']['path'] = $new_path;

      if ($new_path != $path) {
        $new_file = file_unmanaged_copy($path, $new_path, FILE_EXISTS_REPLACE);
        // Delete temporary file.
        file_unmanaged_delete($path);
      }

      // Get link options from db.
      $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $node->menu['mlid']))->fetchField());

      if (!isset($options['attributes'])) {
        $options['attributes'] = array();
      }
      if (!isset($options['attributes']['class'])) {
        $options['attributes']['class'] = array();
      }
      $classes = array();
      $classes[] = "menu_icon";
      $classes[] = "menu-" . $node->menu['mlid'];

      if (!empty($node->menu['icon']['path']) && file_exists($node->menu['icon']['path'])) {
        // Add our menu icon info to the options array
        $options['menu_icon'] = array(
          'enable' => $node->menu['icon']['enable'],
          'path' => $node->menu['icon']['path'],
          'image_style' => $node->menu['icon']['image_style'],
        );
        // Add new classes
        foreach ($classes as $class) {
          if (!in_array($class, $options['attributes']['class'])) {
            $options['attributes']['class'][] = $class;
          }
        }

        if (empty($options['attributes']['class'])) {
          unset($options['attributes']['class']);
        }
        // Update the link options
        db_update('menu_links')
          ->fields(array(
            'options' => serialize($options),
          ))
          ->condition('mlid', $node->menu['mlid'])
          ->execute();
        // Regenerate the css file
        menu_icons_css_generate();

        // @TODO The icon is not shown on first page load. We need to find a solution for this. Meanwhile:
        drupal_set_message(t('A new menu icon has been set for this node. Please refresh the page to view it.'));
      }
    }
  }
}


/**
 * Implements hook_init().
 */
function menu_icons_page_build(&$page) {
  $cssfile = 'public://css/menu_icons.css';
  $css_path = file_create_url($cssfile);
  $menu_css = \Drupal::config('menu_icons.settings')->get('use_css');
  if ( $menu_css && file_exists($cssfile)){
    $css_path = file_create_url($cssfile);
  }
  $page['#attached']['css'] = array(
    $css_path => array(),
  );
}

/**
 * Build CSS based on menu IDs
 *
 * @return A string with the CSS
 */
function menu_icons_css_generate() {
  $css = "";
  $result = db_query("SELECT id, link__options FROM {menu_link_content_data}");
  $pos = \Drupal::config('menu_icons.settings')->get('position');
  $absolute = \Drupal::config('menu_icons.settings')->get('title_display');

  foreach ($result as $item) {
    $options = unserialize($item->link__options);

    if (isset($options['menu_icon']) && $options['menu_icon']['enable'] && !empty($options['menu_icon']['path']) && file_exists($options['menu_icon']['path'])) {

      $image_path = $options['menu_icon']['path'];
      $image_style = (isset($options['menu_icon']['image_style']) && !empty($options['menu_icon']['image_style'])) ? $options['menu_icon']['image_style'] : NULL;
      if ($image_style) {
        $source_uri = $image_path;
        $style = ImageStyle::load($image_style);
        $image_path = $style->buildUri($source_uri);
        if (!file_exists($image_path)) {
          $style = ImageStyle::load($image_style);
          $derivative = $style->createDerivative($source_uri, $image_path);
        }
      }

      // Retrieve the image dimensions
      $image = Drupal::service('image.factory')->get($image_path);
      $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
      $wrapper = $stream_wrapper_manager->getViaScheme(file_uri_scheme($image_path));
      $image_url = '/' . $wrapper->getDirectoryPath() . '/' . file_uri_target($image_path);
      $size = $pos == 'right' || $pos == 'left' ? $image->getWidth() : $image->getHeight();
      // Support private filesystem
      $menu_css = array(
        '#theme' => 'menu_icons_css_item',
        '#mlid' => $item->mlid,
        '#path' => $image_url,
        '#size' => $size,
        '#height' => $image->getHeight(),
        '#pos' => $pos,
        '#source' => $source_uri
      );
      $css .= drupal_render($menu_css);
    }
  }
  $csspath = 'public://css';
  if (!empty($css)) {
    file_prepare_directory($csspath, FILE_CREATE_DIRECTORY);
    file_unmanaged_delete($csspath . '/menu_icons.css');
    file_unmanaged_save_data($css, $csspath . '/menu_icons.css', FILE_EXISTS_REPLACE);
  }
  else {
    file_unmanaged_delete($csspath . '/menu_icons.css');
  }
}

/**
 * Implements hook_theme().
 */
function menu_icons_theme() {
  return array(
    'menu_icons_css_item' => array(
      'variables' => array('mlid' => NULL, 'path' => NULL, 'size' => NULL, 'height' => NULL, 'pos' => NULL, 'source' => NULL),
      'template' => 'menu-icons-css-item',
      'file' => 'menu_icon.theme.inc',
    ),
  );
}

/**
 * Implements hook_menu_breadcrumb_alter()
 * Prevent menu icons from being displayed next to breadcrumbs.
 *
 * @param $active_trail
 * @param $item
 */
function menu_icons_menu_breadcrumb_alter(&$active_trail, $item) {
  foreach ($active_trail as &$crumb) {
    // Check if this is an item with a menu icon.
    if (array_key_exists('mlid', $crumb) && isset($crumb['localized_options']['attributes']['class'])) {
      $mlid = $crumb['mlid'];
      $count = count($crumb['localized_options']['attributes']['class']);
      for ($i = 0; $i < $count; $i++) {
        $class = $crumb['localized_options']['attributes']['class'][$i];
        // If this is a menu_icon class, remove it.
        switch ($class) {
          case 'menu_icon':
          case 'menu-' . $mlid:
            unset($crumb['localized_options']['attributes']['class'][$i]);
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_flush_caches().
 */
function menu_icons_flush_caches() {
  menu_icons_css_generate();
}

/**
 * Returns the file directory path in which both the CSS file and the icons are stored.
 */
function menu_icons_directory_path($full = TRUE) {
  $path = \Drupal::config('menu_icons.settings')->get('folder');
  $path_full = 'public://' . $path;
  return ($full ? $path_full : $path);
}

/**
 * Override theme_menu_link - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
function menu_icon_menu_link($variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  if (isset($element['#localized_options']['menu_icon'])) {
    if ($element['#localized_options']['menu_icon']['enable'] == 1) {
      $element['#attributes']['title'] = $element['#title'];
      $output = l('', $element['#href'], $element['#localized_options']);
    }
  }
  return '<li' . new Attribute($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Override theme_link - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
function menu_icon_link($variables) {
  if (isset($variables['options']['menu_icon'])) {
    if ($variables['options']['menu_icon']['enable'] == 1) {
      $variables['options']['attributes']['title'] = $variables['text'];
      return '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . new Attribute($variables['options']['attributes']) . '></a>';
    }
  }
  return '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . new Attribute($variables['options']['attributes']) . '>' . ($variables['options']['html'] ? $variables['text'] : check_plain($variables['text'])) . '</a>';
}
